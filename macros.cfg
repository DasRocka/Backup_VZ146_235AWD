#[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
#gcode:
  
  #  G28
  #  G92
    #BED_MESH_PROFILE LOAD=default
 #   G28
    #QUAD_GANTRY_LEVEL
    #BED_MESH_CALIBRATE
 #   G1 Z10 F3000                   ; move nozzle away from bed
  #  G21 ;metric values
  #  G90 ;absolute positioning
 #   M82 ;set extruder to absolute mode
  #  M107 ;start with the fan off
  #  G92 E0
    #G1 X90 Y90 F6000
    #PRINTING


#[gcode_macro PRINT_START]
#gcode:
   # {% set BED_TEMP = params.BED_TEMP|default(110)|float %}
   # {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}
    # Start bed heating
  #  M140 S{BED_TEMP}
    # Use absolute coordinates
  #  G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
  #  SET_GCODE_OFFSET Z=0.0
    # Home the printer
   # G28
    # Move the nozzle near the bed
   # G1 Z5 F3000
    # Move the nozzle very close to the bed
   # G1 Z0.15 F300
    # Wait for bed to reach temperature
  #  M190 S{BED_TEMP}
    # Set and wait for nozzle to reach temperature
  #  M109 S{EXTRUDER_TEMP}


#####################################################################
#   print_start macro
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Screw_tilt_adjust if your printer is a Trident
## Quad gantry level if your printer is a V2
## Nevermore - if you have one

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
 # STATUS_HOMING         # Sets SB-leds to homing-mode
  G28                   # Full home (XYZ)
  G90                   # Absolut position

  ##  Uncomment for bed mesh (1 of 2)
  #BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    #STATUS_HEATING                                      # Sets SB-leds to heating-mode
    M106 S255                                           # Turns on the PT-fan

    ##  Uncomment if you have a Nevermore.
    #SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    #STATUS_HEATING                                      # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
    G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c

  ##  Uncomment for Klicky auto-z
  #CALIBRATE_Z                                 # Calibrates Z-offset with klicky
  #SET_DISPLAY_TEXT MSG="Z-offset"             # Displays info

  ##  Uncomment for bed mesh (2 of 2)
  #SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  #STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  #bed_mesh_calibrate                 # Starts bed mesh

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  #STATUS_HEATING                                                # Sets SB-leds to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  #STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
  G0 Z0.4                                          # Raises Z to 0.4
  G91                                              # Incremental positioning 
  G1 X100 E20 F1000                                # Purge line
  G90                                              # Absolut position


[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 F20000                ; move nozzle to remove stringing G0 Z1.00 X20.0 Y20.0 F20000 
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G1 Z20 F3000                   ; move nozzle up 20mm
    M84                            ; disable steppers
    
    #BED_MESH_CLEAR
    #SET_PIN PIN=caselight VALUE=0.00
    #HOTEND_AUS


[gcode_shell_command backup_cfg]
command: ~/backup.sh
timeout: 30.
verbose: True

[gcode_macro BACKUP_CFG]
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg






[gcode_macro ACCELL_TEST_X]
gcode:

    {% set steps = params.STEPS|default(100)|int %}
    {% set speed = params.VELOCITY|default(1000)|float * 60 %}

    {% set inset = 10.0|float %}
    {% set accel = 30000|int %}
    {% set maxX = printer.configfile.settings.stepper_x.position_max|float - inset %}
    {% set maxY = printer.configfile.settings.stepper_y.position_max|float - inset %}
    {% set minX = printer.configfile.settings.stepper_x.position_min|float + inset %}
    {% set minY = printer.configfile.settings.stepper_y.position_min|float + inset %}

    SAVE_GCODE_STATE NAME=accelltest_state

    SET_VELOCITY_LIMIT ACCEL={accel} 
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={accel}
    G28
	G1 Z5
    G1 X{minX} Y{minY} F{speed} 

    {% for INTERVAL in range(steps) %}
        {% set eff = accel + (INTERVAL * 1000) %} 
        SET_VELOCITY_LIMIT ACCEL={eff} 
        SET_VELOCITY_LIMIT ACCEL_TO_DECEL={eff}
        G1 X{minX} Y{minY} F{speed}  
        G1 X{maxX} Y{maxY} F{speed}  

    {% endfor %}    

    RESTORE_GCODE_STATE NAME=accelltest_state 
	
	
	
[gcode_macro ACCELL_TEST_Y]
gcode:

    {% set steps = params.STEPS|default(100)|int %}
    {% set speed = params.VELOCITY|default(1000)|float * 60 %}

    {% set inset = 10.0|float %}
    {% set accel = 10000|int %}
    {% set maxX = printer.configfile.settings.stepper_x.position_max|float - inset %}
    {% set maxY = printer.configfile.settings.stepper_y.position_max|float - inset %}
    {% set minX = printer.configfile.settings.stepper_x.position_min|float + inset %}
    {% set minY = printer.configfile.settings.stepper_y.position_min|float + inset %}

    SAVE_GCODE_STATE NAME=accelltest_state

    SET_VELOCITY_LIMIT ACCEL={accel} 
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={accel}
    G28
	G1 Z5
    G1 X{minX} Y{minY} F{speed} 

    {% for INTERVAL in range(steps) %}
        {% set eff = accel + (INTERVAL * 1000) %} 
        SET_VELOCITY_LIMIT ACCEL={eff} 
        SET_VELOCITY_LIMIT ACCEL_TO_DECEL={eff}
        G1 X{maxX} Y{minY} F{speed}  
        G1 X{minX} Y{maxY} F{speed}  

    {% endfor %}    

    RESTORE_GCODE_STATE NAME=accelltest_state 



[gcode_macro RETRACTION_UP]
gcode:
    {% set CRLEN = printer.firmware_retraction.retract_length|float %}
    {% set NRLEN = CRLEN|float + 0.1 %}
    { action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }
    SET_RETRACTION RETRACT_LENGTH={NRLEN}    

[gcode_macro RETRACTION_DOWN]
gcode:
    {% set CRLEN = printer.firmware_retraction.retract_length|float %}
    {% set NRLEN = CRLEN|float - 0.1 %}
    { action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }
    SET_RETRACTION RETRACT_LENGTH={NRLEN}   


[gcode_macro SET_RETRACTIONLENGTH]
gcode:
  SET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}
  GET_RETRACTION

########################	
[gcode_macro exhaustfan_on]
gcode: 
	SET_FAN_SPEED FAN=Exhaust_fan SPEED=1
###	
	
[gcode_macro exhaustfan_off]
gcode: 
	SET_FAN_SPEED FAN=Exhaust_fan SPEED=0
	
	
###		
	
[gcode_macro enclosurefan_on]
gcode: 
	SET_FAN_SPEED FAN=chamber_fan SPEED=1

###			
	
[gcode_macro enclosurefan_off]
gcode: 
	SET_FAN_SPEED FAN=chamber_fan SPEED=0


[gcode_macro RSCS_on]
gcode: 
	SET_FAN_SPEED FAN=RSCS SPEED=1
###	
	

[gcode_macro RSCS_off]
gcode: 
	SET_FAN_SPEED FAN=RSCS SPEED=0
		
###

[gcode_macro LED_on]
gcode:
	SET_PIN PIN=LED value=1   


[gcode_macro LED_off]
gcode:
	SET_PIN PIN=LED value=0  

###	
	
[gcode_macro PA_tunning]
gcode: 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005


#####

[gcode_macro POWER_OFF]
gcode:
  {action_call_remote_method("set_device_power",
                             device="tplink",
                             state="off")}
#####	

[gcode_macro TEST_RESONNANCES_X]
gcode:
 TEST_RESONANCES AXIS=X


[gcode_macro TEST_RESONNANCES_Y]
gcode:
 TEST_RESONANCES AXIS=Y

[gcode_macro DUMP_WARNINGS]
description: Debug: Print all warning messages from klipper
gcode:
  {% set parameters = ["printer.configfile.warnings:"] %}
  {% for warning in printer.configfile.warnings %}
      {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}
  {% endfor %}
  {action_respond_info(parameters|join("\n"))}

[gcode_macro enable_stepper]
gcode:
    SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
    SET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1
    SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
    SET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1


[gcode_macro disable-steppers]
gcode: 
 M84 

